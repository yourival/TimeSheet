@model TimeSheet.Models.LeaveApplicationViewModel

@{
    ViewBag.Title = "Leave Application";
    string[] LeaveNames = {"Sick Leaves", "Flexi Leaves", "Annual Leaves" };
}

<head>
    @Styles.Render("~/Content/css")
</head>


<body class="center-block">
    @using (Html.BeginForm())
    {
    @Html.AntiForgeryToken()
    <br />

    <div align="center">
        <h3>Your Leave Balance</h3>
        <table class="table-fill table-responsive">
            <thead>
                <tr>
                    @for (int i = 0; i < 3; i++)
                    {
                        <th>@LeaveNames[i]</th>
                    }
                    <th></th>
                </tr>
            </thead>
            <tr>
                @for (int i = 0; i < 3; i++)
                {
                    <td class="lefthours">@Html.DisplayFor(m => m.LeaveRecords[i].AvailableLeaveHours)</td>
                }
                <td>Hours</td>
            </tr>
        </table>
    </div>

    <hr />

    <div class="container" align="center">
        <div class="applicationTable">
            <h3>Leave Application</h3>

            <div class="form-inline form-group">
                <table class="table table-condensed table-fill nomoretable">
                    @Html.HiddenFor(model => model.LeaveApplication.UserID)
                    <thead>
                        <tr>
                            <th>
                                @Html.LabelFor(model => model.LeaveApplication.StartTime, htmlAttributes: new { @class = "control-label" })
                            </th>
                            <th>
                                @Html.LabelFor(model => model.LeaveApplication.EndTime, htmlAttributes: new { @class = "control-label" })
                            </th>
                            <th>
                                @Html.LabelFor(model => model.LeaveApplication.leaveType, htmlAttributes: new { @class = "control-label" })
                            </th>
                            <th>
                                @Html.Label("Manager", htmlAttributes: new { @class = "control-label" })
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.EditorFor(model => model.LeaveApplication.StartTime, new { htmlAttributes = new { @class = "form-control", @id = "start" } })
                                @Html.ValidationMessageFor(model => model.LeaveApplication.StartTime, "", new { @class = "text-danger" })
                            </td>
                            <td>
                                @Html.EditorFor(model => model.LeaveApplication.EndTime, new { htmlAttributes = new { @class = "form-control", @id = "end" } })
                            </td>
                            <td>
                                @Html.DropDownListFor(model => model.LeaveApplication.leaveType, (IEnumerable<SelectListItem>)ViewBag.LeaveType, htmlAttributes: new { @class = "form-control", @id = "leavetypeMain" })
                                @Html.ValidationMessageFor(model => model.LeaveApplication.leaveType, "", new { @class = "text-danger" })
                            </td>
                            <td>
                                @Html.DropDownList("manager", (IEnumerable<SelectListItem>)ViewBag.Manager, htmlAttributes: new { @class = "form-control" })
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <br />
            <div id="alert"></div>

            <input type="submit" value="Submit" id="submit-btn" class="btn btn-primary" disabled="disabled" />
        </div>

        <div id="leave-form"></div>
    </div>
    <br />
    }
</body>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script>
    function renderLeaveForm() {
        var start = $('#start').val();
        var end = $('#end').val();
        var leavetypeMain = $('#leavetypeMain').val();
        var lefthours = $(".lefthours");

        $("#leave-form").text("Loading...");

        //Clear previous validation message
        $("form").removeData("validator");
        $("form").removeData("unobtrusiveValidation");

        $.ajax({
            url: "/LeaveApplication/CreateLeaveForm",
            type: "GET",
            data: { start: start, end: end, leaveType: leavetypeMain }
        })
        .done(function (partialViewResult) {
            $("#leave-form").html(partialViewResult);

            // Enable submit button
            $("#submit-btn").prop("disabled", false);

            //Enable jquery validation
            $.validator.unobtrusive.parse("#leave-form");
            
 
        });
    }

    function getFormattedDate(date) {
        var year = date.getFullYear();
        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;
        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;
        return year + '-' + month + '-' + day;
    }

    $(document).ready(function () {
        var fullDate = new Date();
        var lefthours = [];
        $(".lefthours").each(function (i) {
            lefthours.push($(this).text());
        });

        $("#start").val(getFormattedDate(new Date()));
        $("#end").val(getFormattedDate(new Date()));
        $(".btn-default").on("click", function (e) {
            e.preventDefault();
            $(this).toggleClass("active");
        })
        // When there is any change on dates
        $("#start").on("change", function () {
            if ($("#start").val() > $("#end").val())
                $("#end").val($("#start").val());
            renderLeaveForm();
        });
        $("#end").on("change", function () {
            if ($("#start").val() > $("#end").val())
                $("#start").val($("#end").val());
            renderLeaveForm();
        });
        // When there is any change on leave type
        $("#leavetypeMain").on("change", function () {
            renderLeaveForm();
        });
        // Test if applied leave time is excess available leave balance
        var leavetypes = $(".leavetype");

        var length = leavetimes.length;
        var msg = "";

        for (var i = 0; i < length; i++) {
            lefthours[$(leavetypes[i]).val() - 1] -= $(leavetimes[i]).val();
        }

        for (var i = 0; i < 3; i++) {
            if (lefthours[i] < 0) {
                switch (i) {
                    case 0:
                        msg += "<strong>Sick</strong> ";
                        break;
                    case 1:
                        msg += "<strong>Flexi</strong> ";
                        break;
                    case 2:
                        msg += "<strong>Annual</strong> ";
                        break;
                    default:
                        msg = "Something went wrong";
                }
            }
        }
        // When the 'submit' button is pressed
        $("form").submit(function (e) {
            if (msg != "") {
                $("#alert").attr('class', "alert alert-danger");
                $("#alert").html("<strong>Warning!</strong> " +
                                 "Your leaves application excesses in leave types: " + msg +
                                 "<br/>Please change them up and try submitting again");
                e.preventDefault(e);
                return false;
            } else {
                $("#alert").attr('class', "alert alert-success");
                $("#alert").text("Successfully submitted" + msg);
            }
        });
    });
</script>
